// Generated by CoffeeScript 1.6.3
(function() {
  var Renderer, camelCaseKey, changeCase, coffeescript, config, constants, contentFor, defineCommand, doctype, extend, originKey, partial, utils, yieldContent, _, __helper, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('underscore');

  changeCase = require('change-case');

  coffeescript = require('coffee-script');

  config = require('./config');

  constants = require('./constants');

  utils = require('./utils');

  __helper = {
    entityMap: {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': '&quot;',
      "'": '&#39;',
      "/": '&#x2F;'
    },
    escapeHTML: function(content) {
      return content.toString().replace(/[&<>"'\/]/g, function(s) {
        return __helper.entityMap[s];
      });
    },
    isSelfCloseTag: function(tagName) {
      return __indexOf.call(constants.elements["void"], tagName) >= 0;
    },
    seekRenderer: function(args) {
      var caller;
      caller = args.callee;
      while (caller.renderer == null) {
        caller = caller.caller;
      }
      return caller.renderer;
    },
    renderTag: function() {
      var arg, args, attrs, contents, i, inline, renderer, tagName, _i, _len;
      tagName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      renderer = __helper.seekRenderer(arguments);
      inline = contents = null;
      attrs = {
        classes: []
      };
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        arg = args[i];
        switch (false) {
          case !_.isFunction(arg):
            contents = arg;
            break;
          case !_.isObject(arg):
            _.extend(attrs, arg);
            break;
          case !(_.isString(arg) && args.length === 1):
            contents = arg;
            break;
          case !(_.isString(arg) && i === 0):
            inline = arg.replace(/(#|\.)([\w\d-]+)/gi, function(match, type, val) {
              if (type === '#') {
                if (attrs.id == null) {
                  attrs.id = val;
                }
              } else {
                attrs.classes.push(val);
              }
              return '';
            });
            break;
          default:
            contents = arg;
        }
      }
      return renderer._renderTag(tagName, attrs, inline, contents);
    },
    allTags: utils.mergeElements.apply(null, _.values(constants.elements)),
    revTagMap: _.memoize(function() {
      var tag;
      return _.object((function() {
        var _i, _len, _ref, _results;
        _ref = __helper.allTags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push([changeCase.camelCase(tag), tag]);
        }
        return _results;
      })());
    }),
    compile: function(templateContent, options) {
      var tpl;
      if (options == null) {
        options = {};
      }
      tpl = new Renderer(coffeescript.compile(templateContent, {
        bare: true
      }), options);
      return function(data, sections) {
        if (data == null) {
          data = {};
        }
        if (sections == null) {
          sections = {};
        }
        return tpl.render(data, sections);
      };
    },
    compilePath: function() {
      var cb, options, path, _i;
      path = arguments[0], options = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
      options = options[0] || {};
      if (options.cache && (__helper.cachedTemplates[path] != null)) {
        return cb(null, __helper.cachedTemplates[path]);
      }
      return utils.loadTemplateFromPath(path, function(err, templateContent) {
        var tpl;
        if (err != null) {
          return cb(err);
        }
        tpl = __helper.compile(templateContent, options);
        if (options.cache) {
          __helper.cachedTemplates[path] = tpl;
        }
        return cb(null, tpl);
      });
    },
    compilePathSync: function(path, options) {
      var templateContent, tpl;
      if (options == null) {
        options = {};
      }
      if (options.cache && (__helper.cachedTemplates[path] != null)) {
        return __helper.cachedTemplates[path];
      }
      templateContent = utils.loadTemplateFromPathSync(path);
      tpl = __helper.compile(templateContent, options);
      if (options.cache) {
        __helper.cachedTemplates[path] = tpl;
      }
      return tpl;
    },
    cachedTemplates: {}
  };

  defineCommand = "var " + (_.keys(__helper.revTagMap()).join(',')) + ";";

  if (config.env.isNode != null) {
    require('vm').runInThisContext(defineCommand);
  } else {
    eval(defineCommand);
  }

  _ref = __helper.revTagMap();
  for (camelCaseKey in _ref) {
    originKey = _ref[camelCaseKey];
    eval("" + camelCaseKey + " = _.partial(__helper.renderTag, '" + originKey + "');");
  }

  doctype = function(type) {
    if (type == null) {
      type = 'default';
    }
    return __helper.seekRenderer(arguments)._doctype(type);
  };

  partial = function(path, data) {
    if (data == null) {
      data = {};
    }
    return __helper.seekRenderer(arguments)._partial(path, data);
  };

  extend = function(path, data) {
    if (data == null) {
      data = {};
    }
    return __helper.seekRenderer(arguments)._extend(path, data);
  };

  yieldContent = function(name, contents) {
    return __helper.seekRenderer(arguments)._yieldContent(name, contents);
  };

  contentFor = function(name, contents) {
    return __helper.seekRenderer(arguments)._contentFor(name, contents);
  };

  Renderer = (function() {
    Renderer._renderId = 0;

    function Renderer(template, options) {
      var k, v;
      this.options = options;
      this.locals = _.extend({}, this.options.locals);
      if (_.keys(this.locals).length) {
        defineCommand = "var " + (_.keys(this.options.locals).join(',')) + ";";
        if (config.env.isNode != null) {
          require('vm').runInThisContext(defineCommand);
        } else {
          eval(defineCommand);
        }
        for (k in options) {
          v = options[k];
          eval("" + k + " = v;");
        }
      }
      eval("this.template = function() {" + template + "}");
      this.dataStack = [];
      this.sectionStack = [];
      this.extendStack = [];
    }

    Renderer.prototype.render = function(data, sections) {
      var htmlResult, previousRenderer, renderId;
      this.sections = sections != null ? sections : {};
      this.dataStack.push(this._patchData(data));
      renderId = "_render" + (Renderer.renderId++);
      this.sections[renderId] = [];
      this.sectionStack.push(renderId);
      this.extendStack.push([]);
      previousRenderer = this.template.renderer;
      this.template.renderer = this;
      this.template.apply(this._currentData(), []);
      htmlResult = this._generateResult(renderId);
      this.template.renderer = previousRenderer;
      delete this.sections[renderId];
      this.dataStack.pop();
      this.sectionStack.pop();
      this.extendStack.pop();
      return htmlResult;
    };

    Renderer.prototype._renderTag = function(tagName, attrs, inline, contents) {
      if (tagName === 'text') {
        return this._renderContent(contents, attrs.safe);
      }
      this._text("<", true);
      this._text("" + tagName);
      this._attrs(attrs);
      if (inline != null) {
        this._text("" + inline, attrs.safe);
      }
      if (__helper.isSelfCloseTag(tagName)) {
        if (contents != null) {
          contents = this._renderContent(contents, attrs.safe);
          if (contents != null) {
            this._attrs({
              value: contents
            });
          }
        }
        return this._text(' />', true);
      } else {
        this._text('>', true);
        this._renderContent(contents, attrs.safe);
        this._text('</', true);
        this._text(tagName);
        return this._text('>', true);
      }
    };

    Renderer.prototype._renderContent = function(contents, safe) {
      var previousRenderer, result;
      if (safe == null) {
        safe = false;
      }
      switch (false) {
        case !_.isFunction(contents):
          previousRenderer = contents.renderer;
          contents.renderer = this;
          result = contents.call(this.data);
          if (_.isString(result)) {
            this._text(result, safe);
          }
          contents.renderer = previousRenderer;
          return result;
        default:
          this._text(contents, safe);
          return contents;
      }
    };

    Renderer.prototype._attrs = function(attrs, safe) {
      var attr, attrReady, k, v, val, _results,
        _this = this;
      if (safe == null) {
        safe = false;
      }
      attrReady = function(key, val) {
        _this._text(" " + key + "=", safe);
        _this._text('"', true);
        _this._text(val, safe);
        return _this._text('"', true);
      };
      _results = [];
      for (attr in attrs) {
        val = attrs[attr];
        switch (false) {
          case val !== true:
            _results.push(attrReady(attr, attr));
            break;
          case !_.isFunction(val):
            _results.push(attrReady(attr, "(" + val + ").call(this);"));
            break;
          case attr !== 'data':
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (k in val) {
                v = val[k];
                _results1.push(attrReady("data-" + k, v));
              }
              return _results1;
            })());
            break;
          case attr !== 'classes':
            if (val.length) {
              _results.push(attrReady('class', val.join(' ')));
            } else {
              _results.push(void 0);
            }
            break;
          case attr !== 'safe':
            break;
          default:
            _results.push(attrReady(attr, val));
        }
      }
      return _results;
    };

    Renderer.prototype._doctype = function(type) {
      if (type == null) {
        type = 'default';
      }
      return this._text(constants.doctypes[type], true);
    };

    Renderer.prototype._partial = function(path, data) {
      var newData, partialPath, parts, tpl;
      if (data == null) {
        data = {};
      }
      parts = path.split('/');
      parts[parts.length - 1] = '_' + parts[parts.length - 1];
      partialPath = parts.join('/');
      if (config.env.isBrowser != null) {
        if (__helper.cachedTemplates[path] == null) {
          throw new Error("" + this.options.templatePath + " depends on " + path + ", which is missing.");
        }
        tpl = __helper.cachedTemplates[path];
      }
      if (config.env.isNode != null) {
        tpl = __helper.compilePathSync(partialPath, this.options);
      }
      newData = _.extend({}, this._currentData(), data);
      return this._text(tpl.render(newData, this.sections), data.safe);
    };

    Renderer.prototype._extend = function(path, data) {
      if (data == null) {
        data = {};
      }
    };

    Renderer.prototype._yieldContent = function(name, contents) {};

    Renderer.prototype._contentFor = function(name, contents) {};

    Renderer.prototype._text = function(content, safe) {
      if (safe == null) {
        safe = false;
      }
      return this._currentSection().push(safe ? content.toString() : __helper.escapeHTML(content));
    };

    Renderer.prototype._generateResult = function(renderId) {
      return this.extendStack[this.extendStack.length - 1].join('') + _.flatten(this.sections[renderId]).join('');
    };

    Renderer.prototype._currentData = function() {
      return this.dataStack[this.dataStack.length - 1];
    };

    Renderer.prototype._currentSection = function() {
      return this.sections[this.sectionStack[this.sectionStack.length - 1]];
    };

    Renderer.prototype._patchData = function(data) {
      return _.extend(data, {
        env: _.pick(this.options, 'templatePath')
      });
    };

    return Renderer;

  })();

  module.exports = {
    compile: __helper.compile,
    compilePath: __helper.compilePath
  };

}).call(this);
